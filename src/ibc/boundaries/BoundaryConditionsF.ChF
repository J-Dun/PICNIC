#include "CONSTANTS.H"

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
   
      subroutine evenodd_bc(
     &     CHF_FRA[f],
     &     CHF_BOX[bdrybox],
     &     CHF_CONST_INT[evenodd],
     &     CHF_CONST_INT[stag],
     &     CHF_CONST_INT[idir],
     &     CHF_CONST_INT[iside]
     &     )
c
      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[is]
      integer CHF_AUTODECL[ibeg]
      integer CHF_AUTODECL[ng]
      integer isign
      integer n,d,ng(0:CH_SPACEDIM-1)
c
      isign = 2*iside-1
c
      CHF_DTERM[
      ng0 = CHF_UBOUND[bdrybox;0]-CHF_LBOUND[bdrybox;0]+1;
      ng1 = CHF_UBOUND[bdrybox;1]-CHF_LBOUND[bdrybox;1]+1;
      ng2 = CHF_UBOUND[bdrybox;2]-CHF_LBOUND[bdrybox;2]+1]
c
      CHF_DTERM[
      ibeg0 = ibdryboxlo0+CHF_ID(idir,0)*(1-iside)*ng0;
      ibeg1 = ibdryboxlo1+CHF_ID(idir,1)*(1-iside)*ng1;
      ibeg2 = ibdryboxlo2+CHF_ID(idir,2)*(1-iside)*ng2]
c
      do n=0,nfcomp-1
      CHF_AUTOMULTIDO[bdrybox;i]
      
         CHF_DTERM[
         is0 = i0 + CHF_ID(idir,0)*(2*(ibeg0-i0)-1-isign*stag);
         is1 = i1 + CHF_ID(idir,1)*(2*(ibeg1-i1)-1-isign*stag);
         is2 = i2 + CHF_ID(idir,2)*(2*(ibeg2-i2)-1-isign*stag)]

         f(CHF_AUTOIX[i],n) = evenodd*f(CHF_AUTOIX[is],n)

      CHF_ENDDO
      enddo

      return
      end

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

      subroutine insulator_conductor_bc(
     &     CHF_BOX[bdrybox],
     &     CHF_CONST_INTVECT[ng],
     &     CHF_CONST_INT[idir],
     &     CHF_CONST_INT[iside],
     &     CHF_CONST_REAL[ft],
     &     CHF_CONST_FRA1[ICbinary],
     &     CHF_FRA[Bv],
     &     )
c
      integer CHF_DDECL[i;j;k]
      integer CHF_DDECL[is;js;ks]
      integer CHF_DDECL[ibeg0;ibeg1;ibeg2]
      integer isign
      integer n
      double precision ICbinary0
c
      isign = 2*iside-1

      CHF_DTERM[
      ibeg0 = ibdryboxlo0+CHF_ID(idir,0)*((1-iside)*(ng(0)+1)-1);
      ibeg1 = ibdryboxlo1+CHF_ID(idir,1)*((1-iside)*(ng(1)+1)-1);
      ibeg2 = ibdryboxlo2+CHF_ID(idir,2)*((1-iside)*(ng(2)+1)-1)]
c
      do n=0,nBvcomp-1
      CHF_MULTIDO[bdrybox;i;j;k]
c
        CHF_DTERM[
        is = i + CHF_ID(idir,0)*(2*(ibeg0-i)+isign);
        js = j + CHF_ID(idir,1)*(2*(ibeg1-j)+isign);
        ks = k + CHF_ID(idir,2)*(2*(ibeg2-k)+isign)]
c
        ICbinary0 = ICbinary(CHF_IX[i;j;k])
        if(ICbinary0.eq.zero) then
          Bv(CHF_IX[i;j;k],n) = Bv(CHF_IX[is;js;ks],n)
        else
          Bv(CHF_IX[i;j;k],n) = ft
        endif
c
      CHF_ENDDO
      enddo
c
      return
      end

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

      subroutine insulator_current_density_bc(
     &     CHF_BOX[bdrybox],
     &     CHF_CONST_INT[idir],
     &     CHF_CONST_INT[iside],
     &     CHF_CONST_FRA1[ICbinary],
     &     CHF_FRA1[Jcovar],
     &     )
c
      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[is]
      integer CHF_AUTODECL[ibeg]
      integer CHF_AUTODECL[ng]
      double precision ICbinary0
      integer ng(0:CH_SPACEDIM-1)
c
      CHF_DTERM[
      ng0 = CHF_UBOUND[bdrybox;0]-CHF_LBOUND[bdrybox;0]+1;
      ng1 = CHF_UBOUND[bdrybox;1]-CHF_LBOUND[bdrybox;1]+1;
      ng2 = CHF_UBOUND[bdrybox;2]-CHF_LBOUND[bdrybox;2]+1;
      ng3 = CHF_UBOUND[bdrybox;3]-CHF_LBOUND[bdrybox;3]+1;
      ng4 = CHF_UBOUND[bdrybox;4]-CHF_LBOUND[bdrybox;4]+1]
c
      CHF_DTERM[
      ibeg0 = ibdryboxlo0+CHF_ID(idir,0)*(1-iside)*ng0;
      ibeg1 = ibdryboxlo1+CHF_ID(idir,1)*(1-iside)*ng1;
      ibeg2 = ibdryboxlo2+CHF_ID(idir,2)*(1-iside)*ng2;
      ibeg3 = ibdryboxlo3+CHF_ID(idir,3)*(1-iside)*ng3;
      ibeg4 = ibdryboxlo4+CHF_ID(idir,4)*(1-iside)*ng4]
c
      CHF_AUTOMULTIDO[bdrybox;i]
c
        CHF_DTERM[
        is0 = i0 + CHF_ID(idir,0)*(2*(ibeg0-i0)-1);
        is1 = i1 + CHF_ID(idir,1)*(2*(ibeg1-i1)-1);
        is2 = i2 + CHF_ID(idir,2)*(2*(ibeg2-i2)-1);
        is3 = i3 + CHF_ID(idir,3)*(2*(ibeg3-i3)-1);
        is4 = i4 + CHF_ID(idir,4)*(2*(ibeg4-i4)-1)]
c
        ICbinary0 = ICbinary(CHF_AUTOIX[i])
        if(ICbinary0.eq.zero) then
c          Jcovar(CHF_IX[i]) = extrapolate elsewhere
        else
          Jcovar(CHF_AUTOIX[i]) = -Jcovar(CHF_AUTOIX[is])
        endif
c
      CHF_ENDDO
c
      return
      end
      
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc      
   
      subroutine extrap_bc(
     &     CHF_FRA[f],
     &     CHF_BOX[bdrybox],
     &     CHF_CONST_INT[idir],
     &     CHF_CONST_INT[iside],
     &     CHF_CONST_INT[order]
     &     )
c
      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      integer CHF_AUTODECL[iii]
      integer CHF_AUTODECL[iv]
      integer CHF_AUTODECL[ibeg]
      integer CHF_AUTODECL[ng]
      integer isign
      integer n,d,ng(0:CH_SPACEDIM-1)
c
      isign = 2*iside-1
c
      CHF_AUTOID[iii;idir;isign]
c
c
      CHF_DTERM[
      ng0 = CHF_UBOUND[bdrybox;0]-CHF_LBOUND[bdrybox;0]+1;
      ng1 = CHF_UBOUND[bdrybox;1]-CHF_LBOUND[bdrybox;1]+1;
      ng2 = CHF_UBOUND[bdrybox;2]-CHF_LBOUND[bdrybox;2]+1]
c
      CHF_DTERM[
      ibeg0 = ibdryboxlo0+CHF_ID(idir,0)*(1-iside)*ng0;
      ibeg1 = ibdryboxlo1+CHF_ID(idir,1)*(1-iside)*ng1;
      ibeg2 = ibdryboxlo2+CHF_ID(idir,2)*(1-iside)*ng2]
c
      do n=0,nfcomp-1
      CHF_AUTOMULTIDO[bdrybox;i]
        
        CHF_DTERM[
        iv0 = i0 + CHF_ID(idir,0)*(ibeg0-i0);
        iv1 = i1 + CHF_ID(idir,1)*(ibeg1-i1);
        iv2 = i2 + CHF_ID(idir,2)*(ibeg2-i2)]

          CHF_DTERM[
          ii0 = i0 + CHF_ID(idir,0)*(iside-1)*(2*(i0-ibeg0)+ng0+1);
          ii1 = i1 + CHF_ID(idir,1)*(iside-1)*(2*(i1-ibeg1)+ng1+1);
          ii2 = i2 + CHF_ID(idir,2)*(iside-1)*(2*(i2-ibeg2)+ng2+1)]

          if(order.eq.2) then
             f(CHF_AUTOIX[ii],n) =
     &                   2*f(CHF_IX[ii0-  iii0;ii1-  iii1;ii2-  iii2],n)
     &                 - 1*f(CHF_IX[ii0-2*iii0;ii1-2*iii1;ii2-2*iii2],n)

          else
             f(CHF_AUTOIX[ii],n) =
     &                   4*f(CHF_IX[ii0-  iii0;ii1-  iii1;ii2-  iii2],n)
     &                 - 6*f(CHF_IX[ii0-2*iii0;ii1-2*iii1;ii2-2*iii2],n)
     &                 + 4*f(CHF_IX[ii0-3*iii0;ii1-3*iii1;ii2-3*iii2],n)
     &                 - 1*f(CHF_IX[ii0-4*iii0;ii1-4*iii1;ii2-4*iii2],n)
          endif

      CHF_ENDDO
      enddo

      return
      end

   
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c  this routine is used for fluid momentum density vector on a wall
c  where one sets the normal component (stored as idir comp of f) 
c  to be odd about the boundary and all other components to even
c

      subroutine symmetry_bc(
     &     CHF_FRA[f],
     &     CHF_BOX[bdrybox],
     &     CHF_CONST_INTVECT[ng],
     &     CHF_CONST_INT[idir],
     &     CHF_CONST_INT[iside]
     &     )

      integer CHF_DDECL[i;j;k]
      integer CHF_DDECL[is;js;ks]
      integer CHF_DDECL[ibeg0;ibeg1;ibeg2]
      integer n
      integer isign

      isign = 2*iside-1

      CHF_DTERM[
      ibeg0 = ibdryboxlo0+CHF_ID(idir,0)*((1-iside)*(ng(0)+1)-1);
      ibeg1 = ibdryboxlo1+CHF_ID(idir,1)*((1-iside)*(ng(1)+1)-1);
      ibeg2 = ibdryboxlo2+CHF_ID(idir,2)*((1-iside)*(ng(2)+1)-1)]

      do n=0,nfcomp-1
      CHF_MULTIDO[bdrybox;i;j;k]

        CHF_DTERM[
        is = i + CHF_ID(idir,0)*(2*(ibeg0-i)+isign);
        js = j + CHF_ID(idir,1)*(2*(ibeg1-j)+isign);
        ks = k + CHF_ID(idir,2)*(2*(ibeg2-k)+isign)]

        if (n.eq.idir) then
          f(CHF_IX[i;j;k],n) = -f(CHF_IX[is;js;ks],n)
        else
          f(CHF_IX[i;j;k],n) =  f(CHF_IX[is;js;ks],n)
        endif

      CHF_ENDDO
      enddo
      
      return
      end
      
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

      subroutine dirichlet_bc(
     &     CHF_FRA[f],
     &     CHF_BOX[bdrybox],
     &     CHF_CONST_INTVECT[ng],
     &     CHF_CONST_FRA[val],
     &     CHF_CONST_INT[idir],
     &     CHF_CONST_INT[iside]
     &     )
c
      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      integer CHF_AUTODECL[iii]
      integer CHF_AUTODECL[iv]
      integer CHF_AUTODECL[ibeg]
      integer isign, gn(0:CH_SPACEDIM-1)
      integer n
      REAL_T thirteen
c
      parameter (thirteen=13.d0)
c
      isign = 2*iside-1
c
      CHF_AUTOID[iii;idir;isign]
c
      CHF_DTERM[
      ibeg0 = CHF_LBOUND[bdrybox;0]+CHF_ID(idir,0)*(1-iside)*ng(0);
      ibeg1 = CHF_LBOUND[bdrybox;1]+CHF_ID(idir,1)*(1-iside)*ng(1);
      ibeg2 = CHF_LBOUND[bdrybox;2]+CHF_ID(idir,2)*(1-iside)*ng(2)]
c
      do n=0,nfcomp-1
      CHF_AUTOMULTIDO[bdrybox;i]
c
        CHF_DTERM[
        iv0 = i0+CHF_ID(idir,0)*(ibeg0-i0);
        iv1 = i1+CHF_ID(idir,1)*(ibeg1-i1);
        iv2 = i2+CHF_ID(idir,2)*(ibeg2-i2)]
c
        CHF_DTERM[
        ii0 = i0+CHF_ID(idir,0)*(iside-1)*(2*i0+ng(0)+1);
        ii1 = i1+CHF_ID(idir,1)*(iside-1)*(2*i1+ng(1)+1);
        ii2 = i2+CHF_ID(idir,2)*(iside-1)*(2*i2+ng(2)+1)]
c
        CHF_DTERM[
        gn(0) = ii0-ibeg0;
        gn(1) = ii1-ibeg1;
        gn(2) = ii2-ibeg2]
c
        if (gn(idir).eq.1) then
c
          f(CHF_AUTOIX[ii],n) =
     *         third * (+ twelve   * val(CHF_AUTOIX[iv],n)
     &                        - thirteen * f(CHF_OFFSETIX[ii;-1*iii],n)
     &                        + five     * f(CHF_OFFSETIX[ii;-2*iii],n)
     &                        - one      * f(CHF_OFFSETIX[ii;-3*iii],n))
c
        else if (gn(idir).eq.2) then
c
          f(CHF_AUTOIX[ii],n) =
     &                 + seven  * f(CHF_OFFSETIX[ii;-1*iii],n)
     &                 - twelve * val(CHF_AUTOIX[iv],n)
     &                 + seven  * f(CHF_OFFSETIX[ii;-2*iii],n)
     &                 - one    * f(CHF_OFFSETIX[ii;-3*iii],n)
c
        else if (gn(idir).eq.3) then
c
          f(CHF_AUTOIX[ii],n) =
     &                 + five     * f(CHF_OFFSETIX[ii;-1*iii],n)
     &                 - thirteen * f(CHF_OFFSETIX[ii;-2*iii],n)
     *                 + twelve   * val(CHF_AUTOIX[iv],n)
     &                 - three    * f(CHF_OFFSETIX[ii;-3*iii],n)
c
        else
c
          f(CHF_AUTOIX[ii],n) =
     &                   four * f(CHF_OFFSETIX[ii;-1*iii],n)
     &                 - six  * f(CHF_OFFSETIX[ii;-2*iii],n)
     &                 + four * f(CHF_OFFSETIX[ii;-3*iii],n)
     &                 - one  * f(CHF_OFFSETIX[ii;-4*iii],n)
c
        endif
c
c
      CHF_ENDDO
      enddo
c
      return
      end

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

